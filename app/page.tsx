// "use client";
// import { useEffect, useState } from "react";

// export default function Home() {
//   const [sheetdata, setSheetdata] = useState("");

//   useEffect(() => {
//     console.log("hereheretest");

//     async function fetchData() {
//       const req = await fetch("/api/sheet");
//       const res = await req.json();
//       setSheetdata(res.data);
//     }

//     fetchData();
//   }, []);

//   return (
//     <div>
//       <div>
//         <title>Create Next App</title>
//         <meta name='description' content='Generated by create next app' />
//         <link rel='icon' href='/favicon.ico' />
//       </div>

//       <main>
//         <h1>{JSON.stringify(sheetdata)}</h1>
//       </main>
//     </div>
//   );
// }

// "use client";

// import { useState } from "react";
// import { Input } from "@/components/ui/input";
// import { Textarea } from "@/components/ui/textarea";
// import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
// import { Label } from "@/components/ui/label";
// import { Button } from "@/components/ui/button";
// import { Calendar } from "@/components/ui/calendar";
// import {
//   Popover,
//   PopoverContent,
//   PopoverTrigger,
// } from "@/components/ui/popover";
// import {
//   Select,
//   SelectContent,
//   SelectItem,
//   SelectTrigger,
//   SelectValue,
// } from "@/components/ui/select";
// import { CalendarIcon, ChevronDown } from "lucide-react";
// import { format } from "date-fns";

// export default function EntaseThreeStepAccordion() {
//   const [openSections, setOpenSections] = useState<string[]>([]);
//   const [date, setDate] = useState<Date>();

//   const handleSectionToggle = (value: string) => {
//     setOpenSections((prev) =>
//       prev.includes(value)
//         ? prev.filter((item) => item !== value)
//         : [...prev, value]
//     );
//   };

//   const timeSlots = Array.from({ length: 48 }, (_, i) => {
//     const hour = Math.floor(i / 2);
//     const minute = i % 2 === 0 ? "00" : "30";
//     return `${hour.toString().padStart(2, "0")}:${minute}`;
//   });

//   return (
//     <div className='w-full max-w-2xl mx-auto bg-white'>
//       {["Personal Information", "Ticket Selection", "Payment"].map(
//         (title, index) => (
//           <div key={`step-${index + 1}`} className='border-b border-gray-200'>
//             <button
//               className='w-full py-4 px-4 flex justify-between items-center hover:bg-gray-50 transition-colors'
//               onClick={() => handleSectionToggle(`step-${index + 1}`)}
//             >
//               <div className='flex items-center flex-1'>
//                 <span className='w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center mr-4 text-sm font-bold'>
//                   {index + 1}
//                 </span>
//                 <span className='text-lg font-semibold'>{title}</span>
//               </div>
//               <ChevronDown
//                 className={`w-8 h-8 text-orange-500 transition-transform duration-200 ml-4 ${
//                   openSections.includes(`step-${index + 1}`)
//                     ? "transform rotate-180"
//                     : ""
//                 }`}
//                 strokeWidth={3}
//               />
//             </button>
//             {openSections.includes(`step-${index + 1}`) && (
//               <div className='p-4'>
//                 {index === 0 && (
//                   <div className='space-y-4'>
//                     <div>
//                       <Label htmlFor='name' className='text-red-500'>
//                         * Name:
//                       </Label>
//                       <Input id='name' className='mt-1' />
//                     </div>
//                     <div>
//                       <Label htmlFor='surname' className='text-red-500'>
//                         * Surname:
//                       </Label>
//                       <Input id='surname' className='mt-1' />
//                     </div>
//                     <div>
//                       <Label htmlFor='email' className='text-red-500'>
//                         * Email:
//                       </Label>
//                       <Input id='email' type='email' className='mt-1' />
//                     </div>
//                     <div>
//                       <Label htmlFor='date' className='text-red-500'>
//                         * Date:
//                       </Label>
//                       <Popover>
//                         <PopoverTrigger asChild>
//                           <Button
//                             variant={"outline"}
//                             className={`w-full justify-start text-left font-normal ${
//                               !date && "text-muted-foreground"
//                             }`}
//                           >
//                             <CalendarIcon className='mr-2 h-4 w-4' />
//                             {date ? (
//                               format(date, "PPP")
//                             ) : (
//                               <span>Pick a date</span>
//                             )}
//                           </Button>
//                         </PopoverTrigger>
//                         <PopoverContent className='w-auto p-0'>
//                           <Calendar
//                             mode='single'
//                             selected={date}
//                             onSelect={setDate}
//                             initialFocus
//                           />
//                         </PopoverContent>
//                       </Popover>
//                     </div>
//                     <div>
//                       <Label htmlFor='time' className='text-red-500'>
//                         * Time:
//                       </Label>
//                       <Select>
//                         <SelectTrigger className='w-full'>
//                           <SelectValue placeholder='Select a time' />
//                         </SelectTrigger>
//                         <SelectContent>
//                           {timeSlots.map((time) => (
//                             <SelectItem key={time} value={time}>
//                               {time}
//                             </SelectItem>
//                           ))}
//                         </SelectContent>
//                       </Select>
//                     </div>
//                   </div>
//                 )}
//                 {index === 1 && (
//                   <div className='space-y-4'>
//                     <RadioGroup defaultValue='option-1'>
//                       <div className='flex items-center space-x-2 p-2 border rounded-md'>
//                         <RadioGroupItem value='option-1' id='option-1' />
//                         <Label
//                           htmlFor='option-1'
//                           className='flex justify-between items-center w-full'
//                         >
//                           <span>Standard Ticket</span>
//                           <span className='font-bold'>20.00 лв.</span>
//                         </Label>
//                       </div>
//                       <div className='flex items-center space-x-2 p-2 border rounded-md'>
//                         <RadioGroupItem value='option-2' id='option-2' />
//                         <Label
//                           htmlFor='option-2'
//                           className='flex justify-between items-center w-full'
//                         >
//                           <span>VIP Ticket</span>
//                           <span className='font-bold'>40.00 лв.</span>
//                         </Label>
//                       </div>
//                     </RadioGroup>
//                     <Textarea
//                       placeholder='Additional requests'
//                       className='mt-4'
//                     />
//                   </div>
//                 )}
//                 {index === 2 && (
//                   <div className='space-y-4'>
//                     <RadioGroup defaultValue='card'>
//                       <div className='flex items-center space-x-2 p-2 border rounded-md'>
//                         <RadioGroupItem value='card' id='card' />
//                         <Label htmlFor='card' className='flex items-center'>
//                           <img
//                             src='https://cdn-icons-png.flaticon.com/128/196/196578.png'
//                             alt='Card icon'
//                             className='mr-2 h-6 w-6'
//                           />
//                           Card
//                         </Label>
//                       </div>
//                       <div className='flex items-center space-x-2 p-2 border rounded-md'>
//                         <RadioGroupItem value='easypay' id='easypay' />
//                         <Label htmlFor='easypay' className='flex items-center'>
//                           <img
//                             src='https://cdn-icons-png.flaticon.com/128/196/196578.png'
//                             alt='EasyPay icon'
//                             className='mr-2 h-6 w-6'
//                           />
//                           EasyPay
//                         </Label>
//                       </div>
//                       <div className='flex items-center space-x-2 p-2 border rounded-md'>
//                         <RadioGroupItem value='paypal' id='paypal' />
//                         <Label htmlFor='paypal' className='flex items-center'>
//                           <img
//                             src='https://cdn-icons-png.flaticon.com/128/196/196578.png'
//                             alt='PayPal icon'
//                             className='mr-2 h-6 w-6'
//                           />
//                           PayPal
//                         </Label>
//                       </div>
//                     </RadioGroup>
//                     <Button className='w-full bg-orange-500 hover:bg-orange-600 text-white mt-4'>
//                       Pay Now
//                     </Button>
//                   </div>
//                 )}
//               </div>
//             )}
//           </div>
//         )
//       )}
//     </div>
//   );
// }

"use client";

import { useState, useRef, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { CalendarIcon, ChevronDown } from "lucide-react";
import { format } from "date-fns";

export default function EntaseThreeStepAccordion() {
  const [openSections, setOpenSections] = useState<string[]>([]);
  const [date, setDate] = useState<Date>();
  const contentRefs = useRef<{ [key: string]: HTMLDivElement | null }>({});

  const handleSectionToggle = (value: string) => {
    setOpenSections((prev) =>
      prev.includes(value)
        ? prev.filter((item) => item !== value)
        : [...prev, value]
    );
  };

  useEffect(() => {
    Object.entries(contentRefs.current).forEach(([key, ref]) => {
      if (ref) {
        if (openSections.includes(key)) {
          ref.style.maxHeight = `${ref.scrollHeight}px`;
        } else {
          ref.style.maxHeight = "0px";
        }
      }
    });
  }, [openSections]);

  const timeSlots = Array.from({ length: 48 }, (_, i) => {
    const hour = Math.floor(i / 2);
    const minute = i % 2 === 0 ? "00" : "30";
    return `${hour.toString().padStart(2, "0")}:${minute}`;
  });

  return (
    <div className='w-full max-w-2xl mx-auto bg-white'>
      {["Personal Information", "Ticket Selection", "Payment"].map(
        (title, index) => (
          <div key={`step-${index + 1}`} className='border-b border-gray-200'>
            <button
              className='w-full py-4 px-4 flex justify-between items-center hover:bg-gray-50 transition-colors'
              onClick={() => handleSectionToggle(`step-${index + 1}`)}
            >
              <div className='flex items-center flex-1'>
                <span className='w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center mr-4 text-sm font-bold'>
                  {index + 1}
                </span>
                <span className='text-lg font-semibold'>{title}</span>
              </div>
              <ChevronDown
                className={`w-8 h-8 text-orange-500 transition-transform duration-300 ml-4 ${
                  openSections.includes(`step-${index + 1}`)
                    ? "transform rotate-180"
                    : ""
                }`}
                strokeWidth={3}
              />
            </button>
            <div
              // @ts-expect-error works ok
              ref={(el) => (contentRefs.current[`step-${index + 1}`] = el)}
              className='overflow-hidden transition-all duration-300 ease-in-out'
              style={{ maxHeight: "0px" }}
            >
              <div className='p-4'>
                {index === 0 && (
                  <div className='space-y-4'>
                    <div>
                      <Label htmlFor='name' className='text-red-500'>
                        * Name:
                      </Label>
                      <Input id='name' className='mt-1' />
                    </div>
                    <div>
                      <Label htmlFor='surname' className='text-red-500'>
                        * Surname:
                      </Label>
                      <Input id='surname' className='mt-1' />
                    </div>
                    <div>
                      <Label htmlFor='email' className='text-red-500'>
                        * Email:
                      </Label>
                      <Input id='email' type='email' className='mt-1' />
                    </div>
                    <div>
                      <Label htmlFor='date' className='text-red-500'>
                        * Date:
                      </Label>
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button
                            variant={"outline"}
                            className={`w-full justify-start text-left font-normal ${
                              !date && "text-muted-foreground"
                            }`}
                          >
                            <CalendarIcon className='mr-2 h-4 w-4' />
                            {date ? (
                              format(date, "PPP")
                            ) : (
                              <span>Pick a date</span>
                            )}
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className='w-auto p-0'>
                          <Calendar
                            mode='single'
                            selected={date}
                            onSelect={setDate}
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                    </div>
                    <div>
                      <Label htmlFor='time' className='text-red-500'>
                        * Time:
                      </Label>
                      <Select>
                        <SelectTrigger className='w-full'>
                          <SelectValue placeholder='Select a time' />
                        </SelectTrigger>
                        <SelectContent>
                          {timeSlots.map((time) => (
                            <SelectItem key={time} value={time}>
                              {time}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                )}
                {index === 1 && (
                  <div className='space-y-4'>
                    <RadioGroup defaultValue='option-1'>
                      <div className='flex items-center space-x-2 p-2 border rounded-md'>
                        <RadioGroupItem value='option-1' id='option-1' />
                        <Label
                          htmlFor='option-1'
                          className='flex justify-between items-center w-full'
                        >
                          <span>Standard Ticket</span>
                          <span className='font-bold'>20.00 лв.</span>
                        </Label>
                      </div>
                      <div className='flex items-center space-x-2 p-2 border rounded-md'>
                        <RadioGroupItem value='option-2' id='option-2' />
                        <Label
                          htmlFor='option-2'
                          className='flex justify-between items-center w-full'
                        >
                          <span>VIP Ticket</span>
                          <span className='font-bold'>40.00 лв.</span>
                        </Label>
                      </div>
                    </RadioGroup>
                    <Textarea
                      placeholder='Additional requests'
                      className='mt-4'
                    />
                  </div>
                )}
                {index === 2 && (
                  <div className='space-y-4'>
                    <RadioGroup defaultValue='card'>
                      <div className='flex items-center space-x-2 p-2 border rounded-md'>
                        <RadioGroupItem value='card' id='card' />
                        <Label htmlFor='card' className='flex items-center'>
                          <img
                            src='/placeholder.svg?height=24&width=24'
                            alt='Card icon'
                            className='mr-2 h-6 w-6'
                          />
                          Card
                        </Label>
                      </div>
                      <div className='flex items-center space-x-2 p-2 border rounded-md'>
                        <RadioGroupItem value='easypay' id='easypay' />
                        <Label htmlFor='easypay' className='flex items-center'>
                          <img
                            src='/placeholder.svg?height=24&width=24'
                            alt='EasyPay icon'
                            className='mr-2 h-6 w-6'
                          />
                          EasyPay
                        </Label>
                      </div>
                      <div className='flex items-center space-x-2 p-2 border rounded-md'>
                        <RadioGroupItem value='paypal' id='paypal' />
                        <Label htmlFor='paypal' className='flex items-center'>
                          <img
                            src='/placeholder.svg?height=24&width=24'
                            alt='PayPal icon'
                            className='mr-2 h-6 w-6'
                          />
                          PayPal
                        </Label>
                      </div>
                    </RadioGroup>
                    <Button className='w-full bg-orange-500 hover:bg-orange-600 text-white mt-4'>
                      Pay Now
                    </Button>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      )}
    </div>
  );
}
